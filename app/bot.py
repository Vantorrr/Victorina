from __future__ import annotations

import asyncio
import os
from typing import Final

from telegram import (
    Update,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    WebAppInfo,
    MenuButtonWebApp,
)
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackQueryHandler, MessageHandler, ConversationHandler, filters
import json

from app.db import get_connection, utc_now_iso


BOT_TOKEN: Final[str | None] = os.getenv("BOT_TOKEN")
ADMIN_USERNAMES: Final[list[str]] = [u.strip().lower() for u in (os.getenv("ADMIN_USERNAMES", "").split(",")) if u.strip()]
SEED_ADMIN_ID: Final[int | None] = int(os.getenv("SEED_ADMIN_ID", "0")) or None
BASE_URL: Final[str] = os.getenv("BASE_URL", "http://localhost:8080")


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã.\n\n"
        "‚Ä¢ –í–µ–¥—É—â–∏–π: –Ω–∞–ø–∏—à–∏ \"–ú–µ–Ω—é\" –∏–ª–∏ /host ‚Äî –æ—Ç–∫—Ä–æ—é –ø–∞–Ω–µ–ª—å.\n"
        "‚Ä¢ –ö–∞–ø–∏—Ç–∞–Ω: –∂–º–∏ /register –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –≤–µ–¥—É—â–∏–π –Ω–∞–∑–Ω–∞—á–∏—Ç —Ç–µ–±—è –∫–∞–ø–∏—Ç–∞–Ω–æ–º.\n\n"
        "–£–¥–∞—á–Ω–æ–π –∏–≥—Ä—ã! üéâ"
    )


async def newgame(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /newgame –ù–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã")
        return
    name = " ".join(context.args)
    with get_connection() as conn:
        cur = conn.execute("INSERT INTO games(name, status, current_round) VALUES (?, 'active', 1)", (name,))
        game_id = cur.lastrowid
        conn.execute("INSERT INTO rounds(game_id, number, status) VALUES (?, 1, 'active')", (game_id,))
        conn.commit()
    await update.message.reply_text(
        "üéÆ –ò–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: <b>{name}</b>\n"
        f"ID: <code>{game_id}</code>\n\n"
        "–ß—Ç–æ –¥–∞–ª—å—à–µ?\n"
        "1) ‚ûï –î–æ–±–∞–≤—å –∫–æ–º–∞–Ω–¥—ã (–ú–µ–Ω—é ‚Üí –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É)\n"
        "2) üë®‚Äç‚úàÔ∏è –ö–∞–ø–∏—Ç–∞–Ω—É: –æ—Ç–∫—Ä—ã—Ç—å —á–∞—Ç —Å –±–æ—Ç–æ–º ‚Üí Start ‚Üí /register\n"
        "3) üóÇ –í –∞–¥–º–∏–Ω–∫–µ –º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã/–∫–µ–π—Å—ã\n"
        "4) ‚ñ∂ –ö–æ–≥–¥–∞ –≥–æ—Ç–æ–≤ ‚Äî –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤–æ–ø—Ä–æ—Å\n",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(
            [[InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω–∫—É", web_app=WebAppInfo(url=f"{BASE_URL}/admin"))]]
        ),
    )


async def addteam(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if len(context.args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addteam <–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã> <@username –∫–∞–ø–∏—Ç–∞–Ω–∞>")
        return
    team_name = context.args[0]
    captain_username = context.args[1].lstrip('@')
    with get_connection() as conn:
        cur = conn.execute("INSERT OR IGNORE INTO teams(name) VALUES (?)", (team_name,))
        team_id = cur.lastrowid or conn.execute("SELECT id FROM teams WHERE name=?", (team_name,)).fetchone()[0]
        cur = conn.execute("INSERT OR IGNORE INTO captains(username, team_id) VALUES (?, ?)", (captain_username, team_id))
        if cur.rowcount == 0:
            conn.execute("UPDATE captains SET team_id=? WHERE username=?", (team_id, captain_username))
        conn.commit()
    await update.message.reply_text(
        "‚úÖ –ö–æ–º–∞–Ω–¥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: <b>{team_name}</b>\n"
        f"–ö–∞–ø–∏—Ç–∞–Ω: @{captain_username}\n\n"
        "–ü–æ–ø—Ä–æ—Å–∏ –∫–∞–ø–∏—Ç–∞–Ω–∞: –æ—Ç–∫—Ä—ã—Ç—å —á–∞—Ç —Å –±–æ—Ç–æ–º ‚Üí –Ω–∞–∂–∞—Ç—å Start ‚Üí –æ—Ç–ø—Ä–∞–≤–∏—Ç—å /register.\n"
        "–ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–∞–ø–∏—Ç–∞–Ω –±—É–¥–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã.",
        parse_mode="HTML",
    )


async def register(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    chat = update.effective_chat
    username = (user.username or '').lower()
    with get_connection() as conn:
        cur = conn.execute("SELECT id FROM captains WHERE lower(username)=?", (username,))
        row = cur.fetchone()
        if row is None:
            await update.message.reply_text("–í—ã –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –∫–∞–ø–∏—Ç–∞–Ω–æ–º. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤–µ–¥—É—â–µ–º—É.")
            return
        conn.execute("UPDATE captains SET telegram_user_id=?, chat_id=? WHERE id=?", (user.id, chat.id, row["id"]))
        conn.commit()
    await update.message.reply_text(
        "üéØ –ì–æ—Ç–æ–≤–æ! –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –∫–∞–ø–∏—Ç–∞–Ω —Å–≤–æ–µ–π –∫–æ–º–∞–Ω–¥—ã.\n"
        "–ö–æ–≥–¥–∞ –≤–µ–¥—É—â–∏–π –∑–∞–ø—É—Å—Ç–∏—Ç –≤–æ–ø—Ä–æ—Å ‚Äî –ø–æ–ª—É—á–∏—Ç–µ –∫–Ω–æ–ø–∫–∏ –æ—Ç–≤–µ—Ç–∞ –∏ —Ç–∞–π–º–µ—Ä ‚è± 60—Å."
    )


def _build_answer_keyboard(question_id: int, options: list[str], multi: bool) -> InlineKeyboardMarkup:
    buttons = []
    for idx, label in enumerate(options):
        buttons.append([InlineKeyboardButton(text=label, callback_data=json.dumps({"qid": question_id, "opt": idx}))])
    if multi:
        buttons.append([InlineKeyboardButton(text="–ì–æ—Ç–æ–≤–æ", callback_data=json.dumps({"qid": question_id, "done": True}))])
    return InlineKeyboardMarkup(buttons)


async def send_question_to_captains(game_id: int, question: dict, context: ContextTypes.DEFAULT_TYPE) -> None:
    with get_connection() as conn:
        caps = conn.execute("SELECT telegram_user_id, chat_id, team_id FROM captains WHERE telegram_user_id IS NOT NULL AND chat_id IS NOT NULL").fetchall()
    text = question["text"] + "\n\n" + "\n".join(question["options"]) + ("\n\n–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: 60 —Å–µ–∫—É–Ω–¥" )
    multi = question.get("type") in ("multi", "case")
    kb = _build_answer_keyboard(question["id"], [chr(65+i) for i in range(len(question["options"]))], multi)
    for c in caps:
        try:
            await context.bot.send_message(chat_id=c["chat_id"], text=text, reply_markup=kb)
        except Exception:
            continue


async def begin_question(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /q <question_id>")
        return
    qid = int(context.args[0])
    with get_connection() as conn:
        q = conn.execute("SELECT * FROM questions WHERE id=?", (qid,)).fetchone()
        if not q:
            await update.message.reply_text("–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        game = conn.execute("SELECT * FROM games WHERE status='active' ORDER BY id DESC LIMIT 1").fetchone()
        if not game:
            await update.message.reply_text("–ê–∫—Ç–∏–≤–Ω–∞—è –∏–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        conn.execute("UPDATE games SET current_question_id=?, current_question_deadline=datetime('now','+60 seconds') WHERE id=?", (qid, game["id"]))
        conn.commit()
    await send_question_to_captains(game["id"], {"id": q["id"], "text": q["text"], "options": json.loads(q["options_json"]), "type": q.get("type", "single")}, context)
    await update.message.reply_text(
        f"üì£ –í–æ–ø—Ä–æ—Å <b>{qid}</b> –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–∞–ø–∏—Ç–∞–Ω–∞–º! ‚è± 60 —Å–µ–∫.\n"
        "–ñ–¥–∏ –æ—Ç–≤–µ—Ç—ã –∫–æ–º–∞–Ω–¥. –ü–æ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–∂–º–∏ ‚Äò–°—Ç–æ–ø –ø—Ä–∏—ë–º–∞‚Äô.",
        parse_mode="HTML",
        reply_markup=_host_keyboard(),
    )


async def end_question(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    with get_connection() as conn:
        game = conn.execute("SELECT * FROM games WHERE status='active' ORDER BY id DESC LIMIT 1").fetchone()
        if not game or not game["current_question_id"]:
            await update.message.reply_text("–¢–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω")
            return
        conn.execute("UPDATE games SET current_question_deadline=datetime('now') WHERE id=?", (game["id"],))
        conn.commit()
    await update.message.reply_text(
        "‚õî –ü—Ä–∏—ë–º –æ—Ç–≤–µ—Ç–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.\n"
        "‚úî –ú–æ–∂–µ—à—å –ø–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –∞–¥–º–∏–Ω–∫–µ –∏–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å.",
        reply_markup=InlineKeyboardMarkup(
            [[InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", web_app=WebAppInfo(url=f"{BASE_URL}/admin"))]]
        ),
    )


async def on_answer_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    user = update.effective_user
    await query.answer()
    try:
        data = json.loads(query.data)
    except Exception:
        return
    qid = data.get("qid")
    option_idx = data.get("opt")
    with get_connection() as conn:
        cap = conn.execute("SELECT * FROM captains WHERE telegram_user_id=?", (user.id,)).fetchone()
        if not cap or not cap["team_id"]:
            await query.edit_message_text("–í—ã –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ –∫–æ–º–∞–Ω–¥–µ.")
            return
        game = conn.execute("SELECT * FROM games WHERE status='active' ORDER BY id DESC LIMIT 1").fetchone()
        if not game or not game["current_question_id"]:
            await query.edit_message_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.")
            return
        if game["current_question_deadline"] and conn.execute("SELECT datetime(?) < datetime('now')", (game["current_question_deadline"],)).fetchone()[0]:
            await query.edit_message_text("–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –∏—Å—Ç–µ–∫–ª–æ.")
            return
        exists = conn.execute("SELECT 1 FROM answers WHERE team_id=? AND question_id=?", (cap["team_id"], qid)).fetchone()
        if exists:
            await query.edit_message_text("–û—Ç–≤–µ—Ç —É–∂–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω –æ—Ç –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        if option_idx is None:
            await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç.")
            return
        conn.execute(
            "INSERT INTO answers(game_id, question_id, team_id, captain_user_id, option_index, answered_at) VALUES (?,?,?,?,?,datetime('now'))",
            (game["id"], qid, cap["team_id"], user.id, int(option_idx)),
        )
        conn.commit()
    await query.edit_message_reply_markup(reply_markup=None)
    await query.edit_message_text("–û—Ç–≤–µ—Ç –ø—Ä–∏–Ω—è—Ç. –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–æ.")


# ===== –ú–µ–Ω—é –≤–µ–¥—É—â–µ–≥–æ (–∫–Ω–æ–ø–∫–∏) =====
CHOOSING, NEWGAME_NAME, ADDTEAM_DATA, QUESTION_ID, ADMIN_ADD, ADMIN_DEL = range(6)


def _is_admin(update: Update) -> bool:
    username = (update.effective_user.username or "").lower()
    uid = update.effective_user.id
    with get_connection() as conn:
        row = conn.execute("SELECT 1 FROM admins WHERE telegram_user_id=?", (uid,)).fetchone()
    return bool(row) or (ADMIN_USERNAMES and username in ADMIN_USERNAMES)


def _host_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        [
            ["–ù–æ–≤–∞—è –∏–≥—Ä–∞", "–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É"],
            ["–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤–æ–ø—Ä–æ—Å", "–°—Ç–æ–ø –ø—Ä–∏—ë–º–∞"],
            ["–°—á—ë—Ç", "–≠–∫—Å–ø–æ—Ä—Ç"],
            ["–ê–¥–º–∏–Ω‚Äë–ø–∞–Ω–µ–ª—å", "–≠–∫—Ä–∞–Ω –∑–∞–ª–∞"],
            ["–ê–¥–º–∏–Ω—ã"],
            ["–û—Ç–º–µ–Ω–∞"],
        ],
        resize_keyboard=True,
        one_time_keyboard=False,
    )


def _admins_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        [["–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞", "–£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞"], ["–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤"], ["–ù–∞–∑–∞–¥"]], resize_keyboard=True
    )


async def host_entry(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not _is_admin(update):
        await update.message.reply_text("–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–µ–¥—É—â–µ–≥–æ.")
        return ConversationHandler.END
    await update.message.reply_text(
        "üéõ –ú–µ–Ω—é –≤–µ–¥—É—â–µ–≥–æ\n\n"
        "–®–∞–≥–∏ –∑–∞–ø—É—Å–∫–∞: \n"
        "1) ‚Äò–ù–æ–≤–∞—è –∏–≥—Ä–∞‚Äô ‚Äî —Å–æ–∑–¥–∞—Ç—å –º–∞—Ç—á\n"
        "2) ‚Äò–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É‚Äô ‚Äî –ø—Ä–∏–≤—è–∑–∞—Ç—å @–∫–∞–ø–∏—Ç–∞–Ω–∞\n"
        "3) –ö–∞–ø–∏—Ç–∞–Ω—É: Start ‚Üí /register\n"
        "4) ‚Äò–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤–æ–ø—Ä–æ—Å‚Äô ‚Äî —Ä–∞—Å—Å—ã–ª–∫–∞ —Å —Ç–∞–π–º–µ—Ä–æ–º 60—Å\n",
        reply_markup=_host_keyboard()
    )
    return CHOOSING


async def host_choose(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "–ù–æ–≤–∞—è –∏–≥—Ä–∞":
        await update.message.reply_text("–ù–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã?", reply_markup=ReplyKeyboardRemove())
        return NEWGAME_NAME
    if text == "–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É":
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç: –ù–∞–∑–≤–∞–Ω–∏–µ–ö–æ–º–∞–Ω–¥—ã @username_–∫–∞–ø–∏—Ç–∞–Ω–∞", reply_markup=ReplyKeyboardRemove())
        return ADDTEAM_DATA
    if text == "–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤–æ–ø—Ä–æ—Å":
        await update.message.reply_text("–£–∫–∞–∂–∏ ID –≤–æ–ø—Ä–æ—Å–∞ (—á–∏—Å–ª–æ):", reply_markup=ReplyKeyboardRemove())
        return QUESTION_ID
    if text == "–°—Ç–æ–ø –ø—Ä–∏—ë–º–∞":
        await end_question(update, context)
        await update.message.reply_text("–û–∫.", reply_markup=_host_keyboard())
        return CHOOSING
    if text == "–°—á—ë—Ç":
        with get_connection() as conn:
            rows = conn.execute(
                """
                SELECT t.name AS team,
                       SUM(CASE WHEN q.type='single' AND a.option_index = q.correct_index THEN 1 ELSE 0 END) AS pts
                FROM teams t
                LEFT JOIN answers a ON a.team_id = t.id
                LEFT JOIN questions q ON q.id = a.question_id
                GROUP BY t.name
                ORDER BY pts DESC, team ASC
                """
            ).fetchall()
        lines = [f"{r['team']}: {int(r['pts'] or 0)}" for r in rows]
        await update.message.reply_text("–¢–µ–∫—É—â–∏–π —Å—á—ë—Ç:\n" + ("\n".join(lines) if lines else "–ø–æ–∫–∞ –ø—É—Å—Ç–æ"), reply_markup=_host_keyboard())
        return CHOOSING
    if text == "–≠–∫—Å–ø–æ—Ä—Ç":
        await update.message.reply_text(
            "–≠–∫—Å–ø–æ—Ä—Ç CSV:",
            reply_markup=_host_keyboard()
        )
        # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–º –∫–Ω–æ–ø–∫—É-—Å—Å—ã–ª–∫—É
        await update.message.reply_text(
            "–û—Ç–∫—Ä—ã—Ç—å —ç–∫—Å–ø–æ—Ä—Ç:",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(text="–≠–∫—Å–ø–æ—Ä—Ç CSV", url=f"{BASE_URL}/admin/export.csv")]])
        )
        return CHOOSING
    if text == "–ê–¥–º–∏–Ω‚Äë–ø–∞–Ω–µ–ª—å":
        await update.message.reply_text("–ê–¥–º–∏–Ω‚Äë–ø–∞–Ω–µ–ª—å:", reply_markup=_host_keyboard())
        # –ö–Ω–æ–ø–∫–∞, –æ—Ç–∫—Ä—ã–≤–∞—é—â–∞—è –≤–µ–± –≤–Ω—É—Ç—Ä–∏ Telegram (Web App)
        await update.message.reply_text(
            "–û—Ç–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω–∫—É –≤–æ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–º –æ–∫–Ω–µ:",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å /admin", web_app=WebAppInfo(url=f"{BASE_URL}/admin"))]])
        )
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –æ–±—ã—á–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –±–µ–∑ WebApp
        await update.message.reply_text(
            "–ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è, –Ω–∞–∂–º–∏ —Å—Å—ã–ª–∫—É:",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(text="/admin (—Å—Å—ã–ª–∫–∞)", url=f"{BASE_URL}/admin")]])
        )
        return CHOOSING
    if text == "–≠–∫—Ä–∞–Ω –∑–∞–ª–∞":
        await update.message.reply_text("–≠–∫—Ä–∞–Ω –∑–∞–ª–∞:", reply_markup=_host_keyboard())
        await update.message.reply_text(
            "–û—Ç–∫—Ä—ã—Ç—å —ç–∫—Ä–∞–Ω –∑–∞–ª–∞ –≤–æ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–º –æ–∫–Ω–µ:",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å /hall", web_app=WebAppInfo(url=f"{BASE_URL}/hall"))]])
        )
        await update.message.reply_text(
            "–ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è, –Ω–∞–∂–º–∏ —Å—Å—ã–ª–∫—É:",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(text="/hall (—Å—Å—ã–ª–∫–∞)", url=f"{BASE_URL}/hall")]])
        )
        return CHOOSING
    if text == "–ê–¥–º–∏–Ω—ã":
        await update.message.reply_text("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏:", reply_markup=_admins_keyboard())
        return CHOOSING
    if text == "–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞":
        await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å @username –∏–ª–∏ user_id:", reply_markup=ReplyKeyboardRemove())
        return ADMIN_ADD
    if text == "–£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞":
        await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å @username –∏–ª–∏ user_id:", reply_markup=ReplyKeyboardRemove())
        return ADMIN_DEL
    if text == "–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤":
        with get_connection() as conn:
            rows = conn.execute("SELECT COALESCE(username,'' ) AS u, telegram_user_id AS id FROM admins ORDER BY u ASC, id ASC").fetchall()
        lines = [f"@{r['u']} (id {r['id']})" if r['u'] else f"id {r['id']}" for r in rows]
        await update.message.reply_text("–ê–¥–º–∏–Ω—ã:\n" + ("\n".join(lines) if lines else "–ø–æ–∫–∞ –ø—É—Å—Ç–æ"), reply_markup=_admins_keyboard())
        return CHOOSING
    if text == "–ù–∞–∑–∞–¥":
        await update.message.reply_text("–ú–µ–Ω—é:", reply_markup=_host_keyboard())
        return CHOOSING
    if text == "–û—Ç–º–µ–Ω–∞":
        await update.message.reply_text("–ì–æ—Ç–æ–≤–æ.", reply_markup=ReplyKeyboardRemove())
        return ConversationHandler.END
    await update.message.reply_text("–ù–µ –ø–æ–Ω—è–ª. –í—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç –º–µ–Ω—é.", reply_markup=_host_keyboard())
    return CHOOSING


async def host_newgame_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    name = update.message.text.strip()
    if not name:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")
        return NEWGAME_NAME
    # –ü–µ—Ä–µ–¥–∞–¥–∏–º –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    context.args = [name]
    await newgame(update, context)
    await update.message.reply_text("–°–æ–∑–¥–∞–Ω–æ.", reply_markup=_host_keyboard())
    return CHOOSING


async def host_addteam_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    raw = update.message.text.strip()
    parts = raw.split()
    if len(parts) < 2 or not parts[-1].startswith('@'):
        await update.message.reply_text("–ù—É–∂–Ω–æ: –ù–∞–∑–≤–∞–Ω–∏–µ–ö–æ–º–∞–Ω–¥—ã @username", reply_markup=_host_keyboard())
        return CHOOSING
    captain_mention = parts[-1]
    team_name = raw[: raw.rfind(captain_mention)].strip()
    context.args = [team_name, captain_mention]
    await addteam(update, context)
    await update.message.reply_text("–û–∫.", reply_markup=_host_keyboard())
    return CHOOSING


async def host_question_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    arg = update.message.text.strip()
    if not arg.isdigit():
        await update.message.reply_text("–ù—É–∂–Ω–æ —á–∏—Å–ª–æ.", reply_markup=_host_keyboard())
        return CHOOSING
    context.args = [arg]
    await begin_question(update, context)
    await update.message.reply_text("–û—Ç–ø—Ä–∞–≤–∏–ª.", reply_markup=_host_keyboard())
    return CHOOSING


async def host_admin_add(update: Update, context: ContextTypes.DEFAULT_TYPE):
    raw = update.message.text.strip()
    username = None
    uid = None
    if raw.startswith('@'):
        username = raw.lstrip('@').lower()
    elif raw.isdigit():
        uid = int(raw)
    with get_connection() as conn:
        if uid is None:
            # –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ username —Å—Ä–µ–¥–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–∞–ø–∏—Ç–∞–Ω–æ–≤ (—á—Ç–æ–±—ã –ø–æ–¥—Ö–≤–∞—Ç–∏—Ç—å user_id)
            cap = conn.execute("SELECT telegram_user_id FROM captains WHERE lower(username)=?", (username or '',)).fetchone()
            uid = cap["telegram_user_id"] if cap and cap["telegram_user_id"] else None
        conn.execute("INSERT OR IGNORE INTO admins(telegram_user_id, username) VALUES (?, ?)", (uid, username))
        if uid is None:
            # –¥–æ–±–∞–≤–∏–º —Å—Ç—Ä–æ—á–∫—É —Å username, uid –∑–∞–ø–æ–ª–Ω–∏—Ç—Å—è –ø–æ–∑–∂–µ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏
            conn.execute("INSERT OR IGNORE INTO admins(username) VALUES (?)", (username,))
        conn.commit()
    await update.message.reply_text("–ê–¥–º–∏–Ω –¥–æ–±–∞–≤–ª–µ–Ω (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Ç–æ–ª—å–∫–æ username ‚Äî id –ø–æ–¥—Ç—è–Ω–µ—Ç—Å—è –ø–æ–∑–∂–µ).", reply_markup=_admins_keyboard())
    return CHOOSING


async def host_admin_del(update: Update, context: ContextTypes.DEFAULT_TYPE):
    raw = update.message.text.strip()
    if raw.startswith('@'):
        username = raw.lstrip('@').lower()
        with get_connection() as conn:
            conn.execute("DELETE FROM admins WHERE lower(username)=?", (username,))
            conn.commit()
    elif raw.isdigit():
        with get_connection() as conn:
            conn.execute("DELETE FROM admins WHERE telegram_user_id=?", (int(raw),))
            conn.commit()
    await update.message.reply_text("–ì–æ—Ç–æ–≤–æ.", reply_markup=_admins_keyboard())
    return CHOOSING


def build_application() -> Application | None:
    if not BOT_TOKEN:
        return None
    app = Application.builder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    # –ö–æ–º–∞–Ω–¥—ã –±—ç–∫–∞–ø
    app.add_handler(CommandHandler("newgame", newgame))
    app.add_handler(CommandHandler("addteam", addteam))
    app.add_handler(CommandHandler("register", register))
    app.add_handler(CommandHandler("q", begin_question))
    app.add_handler(CommandHandler("stop", end_question))
    app.add_handler(CallbackQueryHandler(on_answer_callback))

    # –ú–µ–Ω—é –≤–µ–¥—É—â–µ–≥–æ
    conv = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^(–ú–µ–Ω—é|–º–µ–Ω—é|–≤–µ–¥—É—â–∏–π|–í–µ–¥—É—â–∏–π)$"), host_entry), CommandHandler("host", host_entry)],
        states={
            0: [MessageHandler(filters.TEXT & ~filters.COMMAND, host_choose)],
            1: [MessageHandler(filters.TEXT & ~filters.COMMAND, host_newgame_name)],
            2: [MessageHandler(filters.TEXT & ~filters.COMMAND, host_addteam_data)],
            3: [MessageHandler(filters.TEXT & ~filters.COMMAND, host_question_id)],
            4: [MessageHandler(filters.TEXT & ~filters.COMMAND, host_admin_add)],
            5: [MessageHandler(filters.TEXT & ~filters.COMMAND, host_admin_del)],
        },
        fallbacks=[MessageHandler(filters.Regex("^(–û—Ç–º–µ–Ω–∞|–ù–∞–∑–∞–¥)$"), host_choose)],
    )
    app.add_handler(conv)
    return app


async def run_polling(app: Application) -> None:
    await app.initialize()
    await app.start()
    try:
        await app.updater.start_polling()
        # –†–∞–±–æ—Ç–∞–µ—Ç, –ø–æ–∫–∞ –Ω–µ –æ—Ç–º–µ–Ω—è—Ç
        await asyncio.Event().wait()
    finally:
        await app.updater.stop()
        await app.stop()
        await app.shutdown()


